Index: Widgets.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import filedialog, messagebox\r\nfrom PIL import Image, ImageTk\r\n\r\n\r\nclass Widgets:\r\n    def __init__(self, viewer):\r\n        self.viewer = viewer\r\n        self.clipboard = \"\"\r\n        self.history = []\r\n        self.redo_stack = []\r\n\r\n    def create_widgets(self):\r\n        menubar = tk.Menu(self.viewer.root)\r\n\r\n        # File menu\r\n        file_menu = tk.Menu(menubar, tearoff=0)\r\n        file_menu.add_command(label=\"Open Image\", command=self.viewer.open_image)\r\n        file_menu.add_separator()\r\n        file_menu.add_command(label=\"Exit\", command=self.viewer.root.quit)\r\n        menubar.add_cascade(label=\"File\", menu=file_menu)\r\n\r\n        # Edit menu\r\n        edit_menu = tk.Menu(menubar, tearoff=0)\r\n        edit_menu.add_command(label=\"Undo\", accelerator=\"Ctrl+Z\", command=self.undo)\r\n        edit_menu.add_command(label=\"Redo\", accelerator=\"Ctrl+Y\", command=self.redo)\r\n        edit_menu.add_separator()\r\n        edit_menu.add_command(label=\"Cut\", accelerator=\"Ctrl+X\", command=self.cut)\r\n        edit_menu.add_command(label=\"Copy\", accelerator=\"Ctrl+C\", command=self.copy)\r\n        edit_menu.add_command(label=\"Paste\", accelerator=\"Ctrl+V\", command=self.paste)\r\n        edit_menu.add_command(label=\"Delete\", accelerator=\"Del\", command=self.delete)\r\n        edit_menu.add_separator()\r\n        edit_menu.add_command(label=\"Paste As New\", command=self.paste_as_new)\r\n        edit_menu.add_command(label=\"Paste As New (Advanced)\", command=self.paste_as_new_advanced)\r\n        menubar.add_cascade(label=\"Edit\", menu=edit_menu)\r\n\r\n        # Digitize menu\r\n        digitize_menu = tk.Menu(menubar, tearoff=0)\r\n        digitize_menu.add_command(label=\"Select Tool\", accelerator=\"Shift+F2\")\r\n        digitize_menu.add_command(label=\"Axis Point Tool\", accelerator=\"Shift+F3\")\r\n        digitize_menu.add_command(label=\"Scale Bar Tool\", accelerator=\"Shift+F8\")\r\n        digitize_menu.add_command(label=\"Curve Point Tool\", accelerator=\"Shift+F4\")\r\n        digitize_menu.add_command(label=\"Point Match Tool\", accelerator=\"Shift+F5\")\r\n        digitize_menu.add_command(label=\"Color Picker Tool\", accelerator=\"Shift+F6\")\r\n        digitize_menu.add_command(label=\"Segment Fill Tool\", accelerator=\"Shift+F7\")\r\n        menubar.add_cascade(label=\"Digitize\", menu=digitize_menu)\r\n\r\n        # View menu\r\n        view_menu = tk.Menu(menubar, tearoff=0)\r\n\r\n        # Background Toolbar\r\n        view_menu.add_checkbutton(label=\"Background Toolbar\")\r\n        view_menu.add_checkbutton(label=\"Digitizing Tools Toolbar\")\r\n        view_menu.add_checkbutton(label=\"Checklist Guide Toolbar\")\r\n        view_menu.add_checkbutton(label=\"Curve Fitting Window\")\r\n        view_menu.add_checkbutton(label=\"Geometry Window\")\r\n        view_menu.add_checkbutton(label=\"Settings Views Toolbar\")\r\n        view_menu.add_checkbutton(label=\"Coordinate System Toolbar\")\r\n        view_menu.add_separator()\r\n        view_menu.add_checkbutton(label=\"Tool Tips\")\r\n        view_menu.add_checkbutton(label=\"Grid Lines\")\r\n        view_menu.add_separator()\r\n\r\n        # Background submenu\r\n        background_menu = tk.Menu(view_menu, tearoff=0)\r\n        background_menu.add_command(label=\"Show Background\")\r\n        background_menu.add_command(label=\"Hide Background\")\r\n        view_menu.add_cascade(label=\"Background\", menu=background_menu)\r\n\r\n        # Curves submenu\r\n        curves_menu = tk.Menu(view_menu, tearoff=0)\r\n        curves_menu.add_command(label=\"Show Curves\")\r\n        curves_menu.add_command(label=\"Hide Curves\")\r\n        view_menu.add_cascade(label=\"Curves\", menu=curves_menu)\r\n\r\n        # Status Bar submenu\r\n        status_bar_menu = tk.Menu(view_menu, tearoff=0)\r\n        status_bar_menu.add_command(label=\"Show Status Bar\")\r\n        status_bar_menu.add_command(label=\"Hide Status Bar\")\r\n        view_menu.add_cascade(label=\"Status Bar\", menu=status_bar_menu)\r\n\r\n        # Zoom submenu\r\n        zoom_menu = tk.Menu(view_menu, tearoff=0)\r\n        zoom_menu.add_command(label=\"Zoom In\", command=self.zoom_in)\r\n        zoom_menu.add_command(label=\"Zoom Out\", command=self.zoom_out)\r\n        zoom_menu.add_separator()\r\n        zoom_ratios = [\"16:1\", \"8:1\", \"4:1\", \"2:1\", \"1:1\", \"1:2\", \"1:4\", \"1:8\", \"1:16\", \"Fill\"]\r\n        for _ratio in zoom_ratios:\r\n            zoom_menu.add_command(label=_ratio, command=lambda ratio=_ratio: self.set_zoom_factor(ratio))\r\n        view_menu.add_cascade(label=\"Zoom\", menu=zoom_menu)\r\n\r\n        menubar.add_cascade(label=\"View\", menu=view_menu)\r\n\r\n        # Settings menu\r\n        settings_menu = tk.Menu(menubar, tearoff=0)\r\n        settings_menu.add_command(label=\"Coordinates\")\r\n        settings_menu.add_command(label=\"Curve List\")\r\n        settings_menu.add_command(label=\"Curve Properties\")\r\n        settings_menu.add_command(label=\"Digitize Curve\")\r\n        settings_menu.add_command(label=\"Export Format\")\r\n        settings_menu.add_command(label=\"Color Filter\")\r\n        settings_menu.add_command(label=\"Axes Checker\")\r\n        settings_menu.add_command(label=\"Grid Line Display\")\r\n        settings_menu.add_command(label=\"Grid Line Removal\")\r\n        settings_menu.add_command(label=\"Point Match\")\r\n        settings_menu.add_command(label=\"Segment Fill\")\r\n        settings_menu.add_separator()\r\n        settings_menu.add_command(label=\"General\")\r\n        settings_menu.add_command(label=\"Main Window\")\r\n        menubar.add_cascade(label=\"Settings\", menu=settings_menu)\r\n\r\n        self.viewer.root.config(menu=menubar)\r\n\r\n        # Create and place the buttons in a frame\r\n        button_frame = tk.Frame(self.viewer.root)\r\n        button_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)\r\n\r\n        self.viewer.axis_button = tk.Button(button_frame, text=\"Place Axis\", command=lambda: self.viewer.show_axis())\r\n        self.viewer.axis_button.pack(pady=5)\r\n\r\n        self.viewer.set_axis_button = tk.Button(button_frame, text=\"Set Axis\", command=lambda: self.viewer.set_axis())\r\n        self.viewer.set_axis_button.pack(pady=5)\r\n\r\n        self.viewer.add_points_button = tk.Button(button_frame, text=\"Add Points\", command=lambda: self.viewer.show_points())\r\n        self.viewer.add_points_button.pack(pady=5)\r\n\r\n        self.viewer.calculate_button = tk.Button(button_frame, text=\"Calculate\", command=lambda: self.viewer.calculate_values())\r\n        self.viewer.calculate_button.pack(pady=5)\r\n\r\n        # Create a canvas to display the image\r\n        self.viewer.canvas = tk.Canvas(self.viewer.root, bg=\"white\", width=800, height=600)\r\n        self.viewer.canvas.pack(expand=True, fill=tk.BOTH)\r\n        self.viewer.canvas.bind(\"<Button-1>\", self.viewer.mouse_click)\r\n        self.viewer.canvas.bind(\"<Button-3>\", self.viewer.select_axis)\r\n\r\n        self.viewer.checklist = tk.Listbox(self.viewer.root, selectmode=tk.MULTIPLE)\r\n        self.viewer.checklist.pack(side=tk.BOTTOM, fill=tk.X, pady=10)\r\n\r\n    def zoom_in(self):\r\n        self.viewer.zoom_factor *= 1.2\r\n        self.update_image_zoom()\r\n\r\n    def zoom_out(self):\r\n        self.viewer.zoom_factor /= 1.2\r\n        self.update_image_zoom()\r\n\r\n    def set_zoom_factor(self, ratio):\r\n        if ratio == \"Fill\":\r\n            self.zoom_fill()\r\n        else:\r\n            parts = ratio.split(\":\")\r\n            if len(parts) == 2:\r\n                width_ratio, height_ratio = map(int, parts)\r\n                self.viewer.zoom_factor = width_ratio / height_ratio\r\n                self.update_image_zoom()\r\n\r\n    def zoom_fill(self):\r\n        if self.viewer.image_original is not None:\r\n            width = self.viewer.canvas.winfo_width()\r\n            height = self.viewer.canvas.winfo_height()\r\n            resized_image = self.viewer.image_original.resize((width, height), resample=Image.LANCZOS)\r\n            self.viewer.image_tk = ImageTk.PhotoImage(resized_image)\r\n            self.viewer.canvas.delete(\"all\")\r\n            self.viewer.canvas.create_image(0, 0, anchor=tk.NW, image=self.viewer.image_tk)\r\n\r\n    def update_image_zoom(self):\r\n        if self.viewer.image_original is not None:\r\n            width = int(self.viewer.image_original.width * self.viewer.zoom_factor)\r\n            height = int(self.viewer.image_original.height * self.viewer.zoom_factor)\r\n            resized_image = self.viewer.image_original.resize((width, height), resample=Image.LANCZOS)\r\n            self.viewer.image_tk = ImageTk.PhotoImage(resized_image)\r\n            self.viewer.canvas.delete(\"all\")\r\n            self.viewer.canvas.create_image(0, 0, anchor=tk.NW, image=self.viewer.image_tk)\r\n\r\n    def hide_all_curves(self):\r\n        self.update_checkboxes(self.viewer.hide_all_curves_var)\r\n        # tbc\r\n\r\n    def show_selected_curve(self):\r\n        self.update_checkboxes(self.viewer.show_selected_curve_var)\r\n        # tbc\r\n\r\n    def show_all_curves(self):\r\n        self.update_checkboxes(self.viewer.show_all_curves_var)\r\n        # tbc\r\n\r\n    def update_checkboxes(self, selected_var):\r\n        if selected_var == self.viewer.hide_all_curves_var:\r\n            self.viewer.show_selected_curve_var.set(False)\r\n            self.viewer.show_all_curves_var.set(False)\r\n        elif selected_var == self.viewer.show_selected_curve_var:\r\n            self.viewer.hide_all_curves_var.set(False)\r\n            self.viewer.show_all_curves_var.set(False)\r\n        elif selected_var == self.viewer.show_all_curves_var:\r\n            self.viewer.hide_all_curves_var.set(False)\r\n            self.viewer.show_selected_curve_var.set(False)\r\n\r\n    def undo(self):\r\n        if self.history:\r\n            state = self.history.pop()\r\n            self.redo_stack.append(state)\r\n            # Restore the previous state\r\n            if self.history:\r\n                self.restore_state(self.history[-1])\r\n            else:\r\n                self.clear_canvas()\r\n\r\n    def redo(self):\r\n        if self.redo_stack:\r\n            state = self.redo_stack.pop()\r\n            self.history.append(state)\r\n            self.restore_state(state)\r\n\r\n    def cut(self):\r\n        self.copy()\r\n        self.delete()\r\n\r\n    def copy(self):\r\n        selected = self.viewer.canvas.find_withtag(\"current\")\r\n        if selected:\r\n            self.clipboard = self.viewer.canvas.itemcget(selected, \"text\")\r\n\r\n    def paste(self):\r\n        if self.clipboard:\r\n            x, y = self.viewer.canvas.winfo_pointerxy()\r\n            self.viewer.canvas.create_text(x, y, text=self.clipboard)\r\n            self.save_state()\r\n\r\n    def delete(self):\r\n        selected = self.viewer.canvas.find_withtag(\"current\")\r\n        if selected:\r\n            self.viewer.canvas.delete(selected)\r\n            self.save_state()\r\n\r\n    def paste_as_new(self):\r\n        if self.clipboard:\r\n            self.viewer.canvas.create_text(400, 300, text=self.clipboard)  # Paste in the center\r\n            self.save_state()\r\n\r\n    def paste_as_new_advanced(self):\r\n        if self.clipboard:\r\n            self.viewer.canvas.create_text(400, 300, text=self.clipboard, font=(\"Helvetica\", 12, \"bold\"), fill=\"blue\")\r\n            self.save_state()\r\n\r\n    def save_state(self):\r\n        # Save the current state of the canvas\r\n        items = self.viewer.canvas.find_all()\r\n        state = [(self.viewer.canvas.coords(item), self.viewer.canvas.itemcget(item, \"text\")) for item in items]\r\n        self.history.append(state)\r\n\r\n    def restore_state(self, state):\r\n        self.clear_canvas()\r\n        for coords, text in state:\r\n            self.viewer.canvas.create_text(coords, text=text)\r\n\r\n    def clear_canvas(self):\r\n        self.viewer.canvas.delete(\"all\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Widgets.py b/Widgets.py
--- a/Widgets.py	(revision dc752954f2c8d5c4dc0a219eafb7f9e38ebbba01)
+++ b/Widgets.py	(date 1715999524923)
@@ -1,7 +1,8 @@
 import tkinter as tk
 from tkinter import filedialog, messagebox
+from tkinter import ttk
 from PIL import Image, ImageTk
-
+from GeometryWindow import GeometryWindow
 
 class Widgets:
     def __init__(self, viewer):
@@ -9,6 +10,7 @@
         self.clipboard = ""
         self.history = []
         self.redo_stack = []
+        self.geometry_window = None
 
     def create_widgets(self):
         menubar = tk.Menu(self.viewer.root)
@@ -53,7 +55,7 @@
         view_menu.add_checkbutton(label="Digitizing Tools Toolbar")
         view_menu.add_checkbutton(label="Checklist Guide Toolbar")
         view_menu.add_checkbutton(label="Curve Fitting Window")
-        view_menu.add_checkbutton(label="Geometry Window")
+        view_menu.add_checkbutton(label="Geometry Window", command=self.toggle_geometry_window)
         view_menu.add_checkbutton(label="Settings Views Toolbar")
         view_menu.add_checkbutton(label="Coordinate System Toolbar")
         view_menu.add_separator()
@@ -115,7 +117,7 @@
         button_frame = tk.Frame(self.viewer.root)
         button_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)
 
-        self.viewer.axis_button = tk.Button(button_frame, text="Place Axis", command=lambda: self.viewer.show_axis())
+        self.viewer.axis_button = tk.Button(button_frame, text="Place Axis", command=lambda: self.viewer.show_axis() )
         self.viewer.axis_button.pack(pady=5)
 
         self.viewer.set_axis_button = tk.Button(button_frame, text="Set Axis", command=lambda: self.viewer.set_axis())
@@ -127,14 +129,27 @@
         self.viewer.calculate_button = tk.Button(button_frame, text="Calculate", command=lambda: self.viewer.calculate_values())
         self.viewer.calculate_button.pack(pady=5)
 
-        # Create a canvas to display the image
-        self.viewer.canvas = tk.Canvas(self.viewer.root, bg="white", width=800, height=600)
+        # Create a PanedWindow to split the main area and the Geometry Window
+        self.paned_window = tk.PanedWindow(self.viewer.root, orient=tk.HORIZONTAL)
+        self.paned_window.pack(fill=tk.BOTH, expand=1)
+
+        # Create a frame for the main content and add it to the PanedWindow
+        self.main_frame = tk.Frame(self.paned_window)
+        self.paned_window.add(self.main_frame)
+
+        # Create a canvas to display the image in the main frame
+        self.viewer.canvas = tk.Canvas(self.main_frame, bg="white", width=800, height=600)
         self.viewer.canvas.pack(expand=True, fill=tk.BOTH)
         self.viewer.canvas.bind("<Button-1>", self.viewer.mouse_click)
         self.viewer.canvas.bind("<Button-3>", self.viewer.select_axis)
 
-        self.viewer.checklist = tk.Listbox(self.viewer.root, selectmode=tk.MULTIPLE)
-        self.viewer.checklist.pack(side=tk.BOTTOM, fill=tk.X, pady=10)
+    def toggle_geometry_window(self):
+        if self.geometry_window:
+            self.paned_window.forget(self.geometry_window.frame)
+            self.geometry_window = None
+        else:
+            self.geometry_window = GeometryWindow(self.paned_window)
+            self.paned_window.add(self.geometry_window.frame)
 
     def zoom_in(self):
         self.viewer.zoom_factor *= 1.2
@@ -254,4 +269,4 @@
             self.viewer.canvas.create_text(coords, text=text)
 
     def clear_canvas(self):
-        self.viewer.canvas.delete("all")
+        self.viewer.canvas.delete("all")
\ No newline at end of file
Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import filedialog, messagebox\r\n\r\nimport numpy as np\r\nfrom PIL import Image, ImageTk\r\nfrom Widgets import Widgets\r\n\r\n\r\nclass ImageViewer:\r\n    def __init__(self, _root):\r\n        self.show_all_curves_var = None\r\n        self.show_selected_curve_var = None\r\n        self.hide_all_curves_var = None\r\n        self.calculate_button = None\r\n        self.add_points_button = None\r\n        self.set_axis_button = None\r\n        self.canvas = None\r\n        self.root = _root\r\n        self.root.title(\"Show Image\")\r\n        self.zoom_factor = 1.2\r\n\r\n        self.open_image_button = None\r\n        self.image_original = None\r\n        self.image_tk = None\r\n\r\n        self.axis_button = None\r\n        self.axis_state = True\r\n        self.axis_list = []\r\n        self.value_list = []\r\n        self.value_entered = False\r\n        self.axis_counter = 0\r\n        self.selected_axis = None\r\n\r\n        self.points = []\r\n        self.point_values = []\r\n\r\n        self.checklist = None\r\n\r\n        self.widgets = Widgets(self)\r\n        self.widgets.create_widgets()\r\n\r\n    @staticmethod\r\n    def format_control(file_path):\r\n        # File format control\r\n        if file_path.endswith(\".jpg\") or file_path.endswith(\".jpeg\") or file_path.endswith(\".png\"):\r\n            return True\r\n        return False\r\n\r\n    def open_image(self):\r\n        # Select an image file\r\n        file_path = filedialog.askopenfilename()\r\n        if file_path:\r\n            try:\r\n                # Open the image\r\n                self.image_original = Image.open(file_path)\r\n                if not self.format_control(file_path):\r\n                    raise messagebox.showerror(\"Error\", \"Image format is not supported! Please select a valid image file.\")\r\n                self.image_original = self.image_original.resize((800, 600), Image.Resampling.LANCZOS)\r\n                self.image_tk = ImageTk.PhotoImage(self.image_original)\r\n\r\n                # Delete all items on the canvas\r\n                self.canvas.delete(\"all\")\r\n\r\n                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)\r\n\r\n            except (IOError, SyntaxError):\r\n                # Raise an error if the file is not a valid image file\r\n                raise messagebox.showerror(\"Error\", \"Image file is not valid! Please select a valid image file.\")\r\n\r\n    def mouse_click(self, event):\r\n        if hasattr(self.root, \"label\"):\r\n            self.root.label.destroy()  # If the label exists, destroy it\r\n        self.root.label = tk.Label(self.root, text=f\"X: {event.x}, Y: {event.y}\")\r\n        self.root.label.place(x=event.x, y=event.y)\r\n        self.root.label.pack()\r\n\r\n    def show_axis(self):\r\n        if self.axis_state:\r\n            self.root.config(cursor=\"crosshair\")\r\n            self.canvas.bind(\"<Button-1>\", self.place_axis)\r\n            self.canvas.bind(\"<Button-3>\", self.delete_axis)\r\n\r\n            self.axis_state = False\r\n        else:\r\n            self.root.config(cursor=\"\")\r\n            self.canvas.bind(\"<Button-1>\", self.mouse_click)\r\n            self.canvas.bind(\"<Button-3>\", self.select_axis)\r\n            self.axis_state = True\r\n\r\n    def show_points(self):\r\n        if self.axis_state:\r\n            self.root.config(cursor=\"dotbox\")\r\n            self.canvas.bind(\"<Button-1>\", self.add_points)\r\n            self.canvas.bind(\"<Button-3>\", self.delete_point)\r\n            self.axis_state = False\r\n        else:\r\n            self.root.config(cursor=\"\")\r\n            self.canvas.bind(\"<Button-1>\", self.mouse_click)\r\n            self.canvas.bind(\"<Button-3>\", self.select_axis)\r\n            self.axis_state = True\r\n\r\n    def place_axis(self, event):\r\n        if self.value_entered:\r\n            messagebox.showinfo(\"Info\", \"Please, Enter the value for the previous axis.\")\r\n            return\r\n        if self.axis_counter == 3:\r\n            messagebox.showinfo(\"Info\", \"You can only add 4 axes.\")\r\n            return\r\n\r\n        x, y = float(event.x), float(event.y)\r\n        self.canvas.create_line(x - 10, y, x + 10, y, fill=\"red\", width=1)\r\n        self.canvas.create_line(x, y - 10, x, y + 10, fill=\"red\", width=1)\r\n\r\n        value_text = f\"X: {x}, Y: {y}\"\r\n        self.canvas.create_text(x, y - 20, text=value_text, fill=\"blue\")\r\n        self.axis_list.append((x, y))\r\n        self.axis_counter += 1\r\n        self.ask_value_for_axis(x, y)\r\n\r\n    def delete_axis(self, event):\r\n        if self.value_entered:\r\n            messagebox.showinfo(\"Info\", \"Please, Enter the value for the previous axis.\")\r\n            return\r\n\r\n        x, y = event.x, event.y\r\n        for index, axis in enumerate(self.axis_list):\r\n            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:\r\n                self.axis_list.pop(index)\r\n                self.value_list.pop(index)\r\n                self.axis_counter -= 1\r\n                self.canvas.delete(\"all\")\r\n                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)\r\n                for i, _axis in enumerate(self.axis_list):\r\n                    self.canvas.create_line(_axis[0] - 10, _axis[1], _axis[0] + 10, _axis[1], fill=\"red\", width=1)\r\n                    self.canvas.create_line(_axis[0], _axis[1] - 10, _axis[0], _axis[1] + 10, fill=\"red\", width=1)\r\n                    self.canvas.create_text(_axis[0], _axis[1] - 20, text=f\"X: {_axis[0]}, Y: {_axis[1]}\", fill=\"blue\")\r\n                    self.canvas.create_text(_axis[0], _axis[1] + 10, text=f\"value: {self.value_list[i]}\", fill=\"green\")\r\n                for i, _point in enumerate(self.points):\r\n                    self.canvas.create_oval(_point[0] - 2, _point[1] - 2, _point[0] + 2, _point[1] + 2, fill=\"blue\")\r\n                    point_text = f\"X: {_point[0]}, Y: {_point[1]}\"\r\n                    self.canvas.create_text(_point[0], _point[1] - 20, text=point_text, fill=\"purple\")\r\n\r\n    def select_axis(self, event):\r\n        x, y = event.x, event.y\r\n        for index, axis in enumerate(self.axis_list):\r\n            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:\r\n                self.selected_axis = axis\r\n                break\r\n\r\n    def set_axis(self):\r\n        if not self.selected_axis:\r\n            messagebox.showinfo(\"Error\", \"Please, Select a axis.\")\r\n            return\r\n\r\n        set_axis_window = tk.Toplevel(self.root)\r\n        set_axis_window.title(\"Set Axis\")\r\n\r\n        x_label = tk.Label(set_axis_window, text=\"New X coordinate:\")\r\n        x_label.grid(row=0, column=0, padx=5, pady=5)\r\n        x_entry = tk.Entry(set_axis_window)\r\n        x_entry.grid(row=0, column=1, padx=5, pady=5)\r\n\r\n        y_label = tk.Label(set_axis_window, text=\"New Y coordinate:\")\r\n        y_label.grid(row=1, column=0, padx=5, pady=5)\r\n        y_entry = tk.Entry(set_axis_window)\r\n        y_entry.grid(row=1, column=1, padx=5, pady=5)\r\n\r\n        confirm_button = tk.Button(set_axis_window, text=\"Confirm\", command=lambda: self.confirm_axis(set_axis_window, x_entry, y_entry))\r\n        confirm_button.grid(row=2, column=0, columnspan=2, pady=10)\r\n\r\n    def confirm_axis(self, window, x_entry, y_entry):\r\n        print(self.selected_axis)\r\n        new_x = x_entry.get()\r\n        new_y = y_entry.get()\r\n\r\n        if not new_x or not new_y:\r\n            messagebox.showerror(\"Error\", \"Please, Enter new X and Y coordinates.\")\r\n            return\r\n\r\n        try:\r\n            new_x = int(new_x)\r\n            new_y = int(new_y)\r\n        except ValueError:\r\n            messagebox.showerror(\"Error\", \"X and Y coordinates must be integer.\")\r\n            return\r\n\r\n        x = self.selected_axis[0]\r\n        y = self.selected_axis[1]\r\n        for index, axis in enumerate(self.axis_list):\r\n            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:\r\n                self.axis_list.pop(index)\r\n                self.value_list.pop(index)\r\n                self.axis_counter -= 1\r\n                self.canvas.delete(\"all\")\r\n                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)\r\n                for i, _axis in enumerate(self.axis_list):\r\n                    self.canvas.create_line(_axis[0] - 10, _axis[1], _axis[0] + 10, _axis[1], fill=\"red\", width=1)\r\n                    self.canvas.create_line(_axis[0], _axis[1] - 10, _axis[0], _axis[1] + 10, fill=\"red\", width=1)\r\n                    self.canvas.create_text(_axis[0], _axis[1] - 20, text=f\"X: {_axis[0]}, Y: {_axis[1]}\", fill=\"blue\")\r\n                    self.canvas.create_text(_axis[0], _axis[1] + 10, text=f\"value: {self.value_list[i]}\", fill=\"green\")\r\n        x = new_x\r\n        y = new_y\r\n        self.canvas.create_line(x - 10, y, x + 10, y, fill=\"red\", width=1)\r\n        self.canvas.create_line(x, y - 10, x, y + 10, fill=\"red\", width=1)\r\n\r\n        value_text = f\"X: {x}, Y: {y}\"\r\n        self.canvas.create_text(x, y - 20, text=value_text, fill=\"blue\")\r\n        self.axis_list.append((x, y))\r\n        self.axis_counter += 1\r\n        self.ask_value_for_axis(x, y)\r\n        window.destroy()  # Close the window\r\n\r\n    def ask_value_for_axis(self, x, y):\r\n        self.value_entered = True\r\n\r\n        value_window = tk.Toplevel(self.root)\r\n        value_window.title(\"Add Value\")\r\n\r\n        x_label = tk.Label(value_window, text=f\"X Coordinate: {x}\")\r\n        x_label.grid(row=0, column=0, padx=5, pady=5)\r\n\r\n        y_label = tk.Label(value_window, text=f\"Y Coordinate: {y}\")\r\n        y_label.grid(row=1, column=0, padx=5, pady=5)\r\n\r\n        value_x_label = tk.Label(value_window, text=\"Value for X:\")\r\n        value_x_label.grid(row=2, column=0, padx=5, pady=5)\r\n        value_x_entry = tk.Entry(value_window)\r\n        value_x_entry.grid(row=2, column=1, padx=5, pady=5)\r\n\r\n        value_y_label = tk.Label(value_window, text=\"Value for Y:\")\r\n        value_y_label.grid(row=3, column=0, padx=5, pady=5)\r\n        value_y_entry = tk.Entry(value_window)\r\n        value_y_entry.grid(row=3, column=1, padx=5, pady=5)\r\n\r\n        confirm_button = tk.Button(value_window, text=\"Add Value\", command=lambda: self.add_value_to_axis(value_x_entry.get(), value_y_entry.get(), x, y, value_window))\r\n        confirm_button.grid(row=4, column=0, columnspan=2, pady=10)\r\n\r\n    def add_value_to_axis(self, value_x, value_y, x, y, value_window):\r\n        # If the value is not a digit, show an error message\r\n        if value_x.isdigit() and value_y.isdigit():\r\n            value_x = int(value_x)\r\n            value_y = int(value_y)\r\n            self.canvas.create_text(x, y + 10, text=f\"value X: {value_x}, Y: {value_y}\", fill=\"green\")\r\n            self.value_list.append((value_x, value_y))\r\n            print(self.value_list)\r\n            value_window.destroy()  # Close the window\r\n        else:\r\n            messagebox.showerror(\"Error\", \"Please, Enter valid values for X and Y.\")\r\n        self.value_entered = False\r\n\r\n    def add_points(self, event):\r\n        if self.axis_counter < 3:\r\n            messagebox.showinfo(\"Info\", \"Please, Add at least 3 axis to add points.\")\r\n            return\r\n        x, y = event.x, event.y\r\n        self.points.append((x, y))\r\n        self.canvas.create_oval(x - 2, y - 2, x + 2, y + 2, fill=\"blue\")\r\n        point_text = f\"X: {x}, Y: {y}\"\r\n        self.canvas.create_text(x, y - 20, text=point_text, fill=\"purple\")\r\n\r\n    def delete_point(self, event):\r\n        x, y = event.x, event.y\r\n        for index, point in enumerate(self.points):\r\n            if point[0] - 2 <= x <= point[0] + 2 and point[1] - 2 <= y <= point[1] + 2:\r\n                self.points.pop(index)\r\n                self.canvas.delete(\"all\")\r\n                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)\r\n                for i, _point in enumerate(self.points):\r\n                    self.canvas.create_oval(_point[0] - 2, _point[1] - 2, _point[0] + 2, _point[1] + 2, fill=\"blue\")\r\n                    point_text = f\"X: {_point[0]}, Y: {_point[1]}\"\r\n                    self.canvas.create_text(_point[0], _point[1] - 20, text=point_text, fill=\"purple\")\r\n                for i, _axis in enumerate(self.axis_list):\r\n                    self.canvas.create_line(_axis[0] - 10, _axis[1], _axis[0] + 10, _axis[1], fill=\"red\", width=1)\r\n                    self.canvas.create_line(_axis[0], _axis[1] - 10, _axis[0], _axis[1] + 10, fill=\"red\", width=1)\r\n                    self.canvas.create_text(_axis[0], _axis[1] - 20, text=f\"X: {_axis[0]}, Y: {_axis[1]}\", fill=\"blue\")\r\n                    self.canvas.create_text(_axis[0], _axis[1] + 10, text=f\"value: {self.value_list[i]}\", fill=\"green\")\r\n\r\n    def calculate_values(self):\r\n        axis1 = self.axis_list[0]\r\n        axis2 = self.axis_list[1]\r\n        axis3 = self.axis_list[2]\r\n\r\n        value1 = self.value_list[0]\r\n        value2 = self.value_list[1]\r\n        value3 = self.value_list[2]\r\n\r\n        points = self.points\r\n\r\n        x_list = [axis1[0], axis2[0], axis3[0]]\r\n        y_list = [axis1[1], axis2[1], axis3[1]]\r\n\r\n        x_value_list = [value1[0], value2[0], value3[0]]\r\n        y_value_list = [value1[1], value2[1], value3[1]]\r\n\r\n        x_min = min(x_list)\r\n        x_max = max(x_list)\r\n\r\n        x_value_min = min(x_value_list)\r\n        x_value_max = max(x_value_list)\r\n\r\n        x_diff = abs(x_max) - abs(x_min)\r\n\r\n        x_value_diff = x_value_max - x_value_min\r\n\r\n        x_ratio = x_diff / x_value_diff\r\n\r\n        for point in points:\r\n            x = point[0]\r\n            y = point[1]\r\n\r\n            x_value = (x - x_min) / x_ratio\r\n\r\n            coeffs = np.polyfit(y_list, y_value_list, 1)\r\n            y_value = coeffs[0] * y + coeffs[1]\r\n\r\n            self.point_values.append((x_value, y_value))\r\n\r\n        print(self.point_values)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    ImageViewer = ImageViewer(root)\r\n    root.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	(revision dc752954f2c8d5c4dc0a219eafb7f9e38ebbba01)
+++ b/Main.py	(date 1716000036247)
@@ -1,9 +1,23 @@
 import tkinter as tk
 from tkinter import filedialog, messagebox
+from tkinter import ttk
+from PIL import Image, ImageTk
+from Widgets import Widgets
+from GeometryWindow import GeometryWindow
 
-import numpy as np
+import tkinter as tk
+from tkinter import filedialog, messagebox
+from tkinter import ttk
 from PIL import Image, ImageTk
 from Widgets import Widgets
+from GeometryWindow import GeometryWindow
+
+
+def toggle_button_color(button, state):
+    if state:
+        button.config(bg='red')
+    else:
+        button.config(bg='SystemButtonFace')  # Default button color for most systems
 
 
 class ImageViewer:
@@ -11,9 +25,6 @@
         self.show_all_curves_var = None
         self.show_selected_curve_var = None
         self.hide_all_curves_var = None
-        self.calculate_button = None
-        self.add_points_button = None
-        self.set_axis_button = None
         self.canvas = None
         self.root = _root
         self.root.title("Show Image")
@@ -23,7 +34,16 @@
         self.image_original = None
         self.image_tk = None
 
+        self.axis_button_state = False
+        self.set_axis_button_state = False
+        self.add_points_button_state = False
+        self.calculate_button_state = False
+
         self.axis_button = None
+        self.set_axis_button = None
+        self.add_points_button = None
+        self.calculate_button = None
+
         self.axis_state = True
         self.axis_list = []
         self.value_list = []
@@ -41,113 +61,60 @@
 
     @staticmethod
     def format_control(file_path):
-        # File format control
         if file_path.endswith(".jpg") or file_path.endswith(".jpeg") or file_path.endswith(".png"):
             return True
         return False
 
     def open_image(self):
-        # Select an image file
         file_path = filedialog.askopenfilename()
         if file_path:
             try:
-                # Open the image
                 self.image_original = Image.open(file_path)
                 if not self.format_control(file_path):
                     raise messagebox.showerror("Error", "Image format is not supported! Please select a valid image file.")
                 self.image_original = self.image_original.resize((800, 600), Image.Resampling.LANCZOS)
                 self.image_tk = ImageTk.PhotoImage(self.image_original)
 
-                # Delete all items on the canvas
                 self.canvas.delete("all")
-
                 self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)
 
             except (IOError, SyntaxError):
-                # Raise an error if the file is not a valid image file
                 raise messagebox.showerror("Error", "Image file is not valid! Please select a valid image file.")
 
     def mouse_click(self, event):
         if hasattr(self.root, "label"):
-            self.root.label.destroy()  # If the label exists, destroy it
+            self.root.label.destroy()
         self.root.label = tk.Label(self.root, text=f"X: {event.x}, Y: {event.y}")
         self.root.label.place(x=event.x, y=event.y)
         self.root.label.pack()
 
     def show_axis(self):
-        if self.axis_state:
+        self.axis_button_state = not self.axis_button_state
+        toggle_button_color(self.axis_button, self.axis_button_state)
+        if self.axis_button_state:
             self.root.config(cursor="crosshair")
             self.canvas.bind("<Button-1>", self.place_axis)
             self.canvas.bind("<Button-3>", self.delete_axis)
-
-            self.axis_state = False
         else:
             self.root.config(cursor="")
             self.canvas.bind("<Button-1>", self.mouse_click)
             self.canvas.bind("<Button-3>", self.select_axis)
-            self.axis_state = True
 
     def show_points(self):
-        if self.axis_state:
+        self.add_points_button_state = not self.add_points_button_state
+        toggle_button_color(self.add_points_button, self.add_points_button_state)
+        if self.add_points_button_state:
             self.root.config(cursor="dotbox")
             self.canvas.bind("<Button-1>", self.add_points)
             self.canvas.bind("<Button-3>", self.delete_point)
-            self.axis_state = False
         else:
             self.root.config(cursor="")
             self.canvas.bind("<Button-1>", self.mouse_click)
             self.canvas.bind("<Button-3>", self.select_axis)
-            self.axis_state = True
-
-    def place_axis(self, event):
-        if self.value_entered:
-            messagebox.showinfo("Info", "Please, Enter the value for the previous axis.")
-            return
-        if self.axis_counter == 3:
-            messagebox.showinfo("Info", "You can only add 4 axes.")
-            return
-
-        x, y = float(event.x), float(event.y)
-        self.canvas.create_line(x - 10, y, x + 10, y, fill="red", width=1)
-        self.canvas.create_line(x, y - 10, x, y + 10, fill="red", width=1)
-
-        value_text = f"X: {x}, Y: {y}"
-        self.canvas.create_text(x, y - 20, text=value_text, fill="blue")
-        self.axis_list.append((x, y))
-        self.axis_counter += 1
-        self.ask_value_for_axis(x, y)
-
-    def delete_axis(self, event):
-        if self.value_entered:
-            messagebox.showinfo("Info", "Please, Enter the value for the previous axis.")
-            return
-
-        x, y = event.x, event.y
-        for index, axis in enumerate(self.axis_list):
-            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:
-                self.axis_list.pop(index)
-                self.value_list.pop(index)
-                self.axis_counter -= 1
-                self.canvas.delete("all")
-                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)
-                for i, _axis in enumerate(self.axis_list):
-                    self.canvas.create_line(_axis[0] - 10, _axis[1], _axis[0] + 10, _axis[1], fill="red", width=1)
-                    self.canvas.create_line(_axis[0], _axis[1] - 10, _axis[0], _axis[1] + 10, fill="red", width=1)
-                    self.canvas.create_text(_axis[0], _axis[1] - 20, text=f"X: {_axis[0]}, Y: {_axis[1]}", fill="blue")
-                    self.canvas.create_text(_axis[0], _axis[1] + 10, text=f"value: {self.value_list[i]}", fill="green")
-                for i, _point in enumerate(self.points):
-                    self.canvas.create_oval(_point[0] - 2, _point[1] - 2, _point[0] + 2, _point[1] + 2, fill="blue")
-                    point_text = f"X: {_point[0]}, Y: {_point[1]}"
-                    self.canvas.create_text(_point[0], _point[1] - 20, text=point_text, fill="purple")
-
-    def select_axis(self, event):
-        x, y = event.x, event.y
-        for index, axis in enumerate(self.axis_list):
-            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:
-                self.selected_axis = axis
-                break
 
     def set_axis(self):
+        self.set_axis_button_state = not self.set_axis_button_state
+        toggle_button_color(self.set_axis_button, self.set_axis_button_state)
         if not self.selected_axis:
             messagebox.showinfo("Error", "Please, Select a axis.")
             return
@@ -169,7 +136,6 @@
         confirm_button.grid(row=2, column=0, columnspan=2, pady=10)
 
     def confirm_axis(self, window, x_entry, y_entry):
-        print(self.selected_axis)
         new_x = x_entry.get()
         new_y = y_entry.get()
 
@@ -208,7 +174,7 @@
         self.axis_list.append((x, y))
         self.axis_counter += 1
         self.ask_value_for_axis(x, y)
-        window.destroy()  # Close the window
+        window.destroy()
 
     def ask_value_for_axis(self, x, y):
         self.value_entered = True
@@ -236,14 +202,12 @@
         confirm_button.grid(row=4, column=0, columnspan=2, pady=10)
 
     def add_value_to_axis(self, value_x, value_y, x, y, value_window):
-        # If the value is not a digit, show an error message
         if value_x.isdigit() and value_y.isdigit():
             value_x = int(value_x)
             value_y = int(value_y)
             self.canvas.create_text(x, y + 10, text=f"value X: {value_x}, Y: {value_y}", fill="green")
             self.value_list.append((value_x, value_y))
-            print(self.value_list)
-            value_window.destroy()  # Close the window
+            value_window.destroy()
         else:
             messagebox.showerror("Error", "Please, Enter valid values for X and Y.")
         self.value_entered = False
@@ -258,6 +222,53 @@
         point_text = f"X: {x}, Y: {y}"
         self.canvas.create_text(x, y - 20, text=point_text, fill="purple")
 
+    def place_axis(self, event):
+        if self.value_entered:
+            messagebox.showinfo("Info", "Please, Enter the value for the previous axis.")
+            return
+        if self.axis_counter == 3:
+            messagebox.showinfo("Info", "You can only add 4 axes.")
+            return
+
+        x, y = float(event.x), float(event.y)
+        self.canvas.create_line(x - 10, y, x + 10, y, fill="red", width=1)
+        self.canvas.create_line(x, y - 10, x, y + 10, fill="red", width=1)
+
+        value_text = f"X: {x}, Y: {y}"
+        self.canvas.create_text(x, y - 20, text=value_text, fill="blue")
+        self.axis_list.append((x, y))
+        self.axis_counter += 1
+        self.ask_value_for_axis(x, y)
+    def delete_axis(self, event):
+        if self.value_entered:
+            messagebox.showinfo("Info", "Please, Enter the value for the previous axis.")
+            return
+
+        x, y = event.x, event.y
+        for index, axis in enumerate(self.axis_list):
+            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:
+                self.axis_list.pop(index)
+                self.value_list.pop(index)
+                self.axis_counter -= 1
+                self.canvas.delete("all")
+                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_tk)
+                for i, _axis in enumerate(self.axis_list):
+                    self.canvas.create_line(_axis[0] - 10, _axis[1], _axis[0] + 10, _axis[1], fill="red", width=1)
+                    self.canvas.create_line(_axis[0], _axis[1] - 10, _axis[0], _axis[1] + 10, fill="red", width=1)
+                    self.canvas.create_text(_axis[0], _axis[1] - 20, text=f"X: {_axis[0]}, Y: {_axis[1]}", fill="blue")
+                    self.canvas.create_text(_axis[0], _axis[1] + 10, text=f"value: {self.value_list[i]}", fill="green")
+                for i, _point in enumerate(self.points):
+                    self.canvas.create_oval(_point[0] - 2, _point[1] - 2, _point[0] + 2, _point[1] + 2, fill="blue")
+                    point_text = f"X: {_point[0]}, Y: {_point[1]}"
+                    self.canvas.create_text(_point[0], _point[1] - 20, text=point_text, fill="purple")
+
+    def select_axis(self, event):
+        x, y = event.x, event.y
+        for index, axis in enumerate(self.axis_list):
+            if axis[0] - 10 <= x <= axis[0] + 10 and axis[1] - 10 <= y <= axis[1] + 10:
+                self.selected_axis = axis
+                break
+
     def delete_point(self, event):
         x, y = event.x, event.y
         for index, point in enumerate(self.points):
@@ -276,6 +287,9 @@
                     self.canvas.create_text(_axis[0], _axis[1] + 10, text=f"value: {self.value_list[i]}", fill="green")
 
     def calculate_values(self):
+        self.calculate_button_state = not self.calculate_button_state
+        toggle_button_color(self.calculate_button, self.calculate_button_state)
+
         axis1 = self.axis_list[0]
         axis2 = self.axis_list[1]
         axis3 = self.axis_list[2]
@@ -317,8 +331,7 @@
 
         print(self.point_values)
 
-
 if __name__ == "__main__":
     root = tk.Tk()
     ImageViewer = ImageViewer(root)
-    root.mainloop()
+    root.mainloop()
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fbf45b3d-5643-47a6-9cb5-639c3fc19e86\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;BaytakFurkan&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/FurkanBaytak/Data-Point-Digitizer.git&quot;,\r\n    &quot;accountId&quot;: &quot;b8d4725a-af83-4b35-9e76-e205a7490d1d&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2g2gvPASVd39eQkCuWK9dHV73pu\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.Main.executor\": \"Run\",\r\n    \"Python.Tools.executor\": \"Run\",\r\n    \"Python.file.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"C:/Users/furkan/Desktop/Tkinter-Designer-master\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\furkan\\PycharmProjects\\Engauge Digitizer\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Engauge Digitizer\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-babbdf50b680-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.15989.155\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"fbf45b3d-5643-47a6-9cb5-639c3fc19e86\" name=\"Changes\" comment=\"\" />\r\n      <created>1714901316405</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1714901316405</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision dc752954f2c8d5c4dc0a219eafb7f9e38ebbba01)
+++ b/.idea/workspace.xml	(date 1715997588026)
@@ -5,8 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="fbf45b3d-5643-47a6-9cb5-639c3fc19e86" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/GeometryWindow.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Main.py" beforeDir="false" afterPath="$PROJECT_DIR$/Main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Widgets.py" beforeDir="false" afterPath="$PROJECT_DIR$/Widgets.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,6 +24,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="RESET_MODE" value="HARD" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -47,18 +50,18 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.Main.executor": "Run",
-    "Python.Tools.executor": "Run",
-    "Python.file.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "C:/Users/furkan/Desktop/Tkinter-Designer-master",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.Main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Tools.executor&quot;: &quot;Run&quot;,
+    &quot;Python.file.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/furkan/Desktop/Tkinter-Designer-master&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\furkan\PycharmProjects\Engauge Digitizer" />
@@ -74,6 +77,7 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
+      <option name="SDK_NAME" value="C:\Users\onyxe\anaconda3" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
       <option name="IS_MODULE_SDK" value="false" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
Index: GeometryWindow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GeometryWindow.py b/GeometryWindow.py
new file mode 100644
--- /dev/null	(date 1715998757282)
+++ b/GeometryWindow.py	(date 1715998757282)
@@ -0,0 +1,30 @@
+import tkinter as tk
+from tkinter import filedialog, messagebox
+from tkinter import ttk
+from PIL import Image, ImageTk
+
+
+class GeometryWindow:
+    def __init__(self, parent):
+        self.frame = tk.Frame(parent)
+        self.label = tk.Label(self.frame, text="Geometry Window", bg="lightgrey")
+        self.label.pack(side=tk.TOP, fill=tk.X)
+
+        self.tree = ttk.Treeview(self.frame, columns=("X", "Y", "Index", "Distance"), show="headings")
+        self.tree.heading("X", text="X")
+        self.tree.heading("Y", text="Y")
+        self.tree.heading("Index", text="Index")
+        self.tree.heading("Distance", text="Distance")
+        self.tree.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
+
+        self.populate_tree()
+
+    def populate_tree(self):
+        # Sample data
+        sample_data = [
+            (1, 2, 1, 3.5),
+            (4, 5, 2, 7.1),
+            (7, 8, 3, 1.2)
+        ]
+        for item in sample_data:
+            self.tree.insert("", "end", values=item)
\ No newline at end of file
